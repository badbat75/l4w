#!/bin/bash

#set -x

SEP="'"

### Performance
THREADS=$(echo $(nproc)/2+1 | bc) 

### Directory settings
WD=$(dirname $(realpath $0))
PD=${WD}/packages
SD=${WD}/src
BD=${WD}/build
LDIR=${WD}/log
SYSROOT=c:/l4w
TD=/mnt/c/l4w

### CrossCompiler environment
HOST=x86_64-w64-mingw32
XCP=/opt/x-tools/$HOST
XCBP=$XCP/bin
export PATH=${PATH}:${XCBP}
CC=$HOST-gcc
CXX=$HOST-g++
CPP=$HOST-cpp
RANLIB=$CC-ranlib
LD=$HOST-ld
#export LDFLAGS="-L$XCP/$HOST/sysroot/mingw/lib -L$XCP/$HOST/sysroot/lib -L$XCP/$HOST/sysroot/usr/lib"
export uname="mingw"

declare -A PKGNAMEs
declare -A URLs
declare -A PATCHes
declare -A VARs
declare -A CONFs
declare -A SRCDIRs
declare -A BUILDFLAGs
declare -A MAKEINSTs

THREADS=$(echo $(nproc)/2+1 | bc)

[ -f $WD/l4wsetup.res ] && . $WD/l4wsetup.res || exit 1


function prepare() {
	echo -n "$package: downloading... "
	cd ${PD}
	[ ! -f ${PKGNAMEs[$package]} ] && curl -sLo ${PKGNAMEs[$package]} ${URLs[$package]}
	cd ${SD}
	SRCDIRs[$package]=$(tar tf ${PD}/${PKGNAMEs[$package]} | head -n1 | awk -F "/" '{ print $1 }')
	if [ ! -d ${SRCDIRs[$package]} ]
	then
		tar xf ${PD}/${PKGNAMEs[$package]}
		if [ ! -z "${PATCHes[$package]}" ]
		then
			echo -n "patching... "
			mkdir ${SRCDIRs[$package]}/patches
			cd ${SRCDIRs[$package]}
			for patch in ${PATCHes[$package]}
			do
				patch_url="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\1/g')"
				patch_name="$(echo $patch_url | sed 's/.*\///')"
				patch_param="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\2/g')"
				echo -n "$patch_name... "
				cd patches
				curl -sO -A "wget" "$patch_url" >> ${LDIR}/$package.log 2>&1
				cd ..
				patch $patch_param < patches/$patch_name >> ${LDIR}/$package.log 2>&1
			done
		fi
		cd ${SD}/${SRCDIRs[$package]}
		case ${BUILDFLAGs[$package]} in
			*"autoreconf"*)
				echo -n "reconfiguring... "
				autoreconf -fi >> ${LDIR}/$package.log 2>&1
				;;
			*"libtoolize"*)
				echo -n "libtoolizing... "
				libtoolize --automake --copy --force >> ${LDIR}/$package.log 2>&1
				;&
			*"autogen"*)
				echo -n "autogen.sh... "
				WANT_AUTOMAKE=latest ./autogen.sh --skip-gnulib >> ${LDIR}/$package.log 2>&1
				;;
		esac
	fi
}

function build() {
	cd ${BD}
	[ ! -d $package ] && mkdir $package
	cd $package
	if [ ! -f l4w.installed ]
	then
		rm -rf *
		echo "building... "
		echo "${VARs[$package]} ${SD}/${SRCDIRs[$package]}/${CONFs[$package]}"
		sh -c "${VARs[$package]} ${SD}/${SRCDIRs[$package]}/${CONFs[$package]}" >> ${LDIR}/$package.log 2>&1 &&
		make -j$THREADS V=1 >> ${LDIR}/$package.log 2>&1 &&
		make DESTDIR=${TD} -j${THREADS} ${MAKEINSTs[package]:-install} >> ${LDIR}/$package.log 2>&1 &&
		touch l4w.installed && BUILD_STATUS=0 || BUILD_STATUS=1
		if [ "$BUILD_STATUS" -eq "0" ]
		then
			echo "installed."
		else
			echo "failed."
			exit 1
		fi
		echo ""
	else
		echo "already installed."
	fi
#	read
}

### Main

[ ! -d ${PD} ] && mkdir ${PD}
[ ! -d ${SD} ] && mkdir ${SD}
[ ! -d ${BD} ] && mkdir ${BD}
[ ! -d ${TD} ] && mkdir ${TD}
[ ! -d ${LDIR} ] && mkdir ${LDIR}

for package in ${PKGLIST}
do
	prepare
	build
done
cd ${WD}